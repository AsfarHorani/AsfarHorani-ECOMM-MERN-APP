{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Projects\\\\e-commerce\\\\front-end\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Body from './container/Body/body';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isAuth: false,\n      token: null,\n      adminId: null,\n      showSideBar: true\n    };\n\n    this.componentDidMount = () => {\n      const token = localStorage.getItem('token');\n      const expiryDate = localStorage.getItem('expiryDate');\n\n      if (!token || !expiryDate) {\n        return;\n      }\n\n      if (new Date(expiryDate) <= new Date()) {\n        this.logoutHandler();\n        return;\n      }\n\n      const adminId = localStorage.getItem('adminId');\n      const remainingMilliseconds = new Date(expiryDate).getTime() - new Date().getTime();\n      this.setState({\n        isAuth: true,\n        token: token,\n        adminId: adminId\n      });\n      this.setAutoLogout(remainingMilliseconds);\n    };\n\n    this.logoutHandler = () => {\n      this.setState({\n        isAuth: false,\n        token: null\n      });\n      localStorage.removeItem('token');\n      localStorage.removeItem('expiryDate');\n      localStorage.removeItem('adminId');\n      console.log('Loggedout');\n    };\n\n    this.signupHandler = adminData => {\n      console.log(adminData);\n      fetch('http://localhost:8080/signup/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: adminData.email,\n          password: adminData.password,\n          name: adminData.name\n        })\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('create admin failed');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(resData);\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.loginHandler = loginData => {\n      console.log(loginData);\n      fetch('http://localhost:8080/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: loginData.email,\n          password: loginData.password\n        })\n      }).then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Login failed');\n        }\n\n        return res.json();\n      }).then(resData => {\n        console.log(resData);\n        this.setState({\n          isAuth: true,\n          token: resData.token\n        });\n        localStorage.setItem('token', resData.token);\n        localStorage.setItem('adminId', resData.adminId);\n        const remainingMilliseconds = 60 * 60 * 1000;\n        const expiryDate = new Date(new Date().getTime() + remainingMilliseconds);\n        localStorage.setItem('expiryDate', expiryDate.toISOString());\n        this.setAutoLogout(remainingMilliseconds);\n      });\n    };\n\n    this.setAutoLogout = milliseconds => {\n      setTimeout(() => {\n        this.logoutHandler();\n      }, milliseconds);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Body, {\n        logout: this.logoutHandler,\n        login: this.loginHandler,\n        token: this.state.token,\n        isAuth: this.state.isAuth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Work/Projects/e-commerce/front-end/src/App.js"],"names":["React","Component","Body","App","state","isAuth","token","adminId","showSideBar","componentDidMount","localStorage","getItem","expiryDate","Date","logoutHandler","remainingMilliseconds","getTime","setState","setAutoLogout","removeItem","console","log","signupHandler","adminData","fetch","method","headers","body","JSON","stringify","email","password","name","then","res","status","Error","json","resData","catch","err","loginHandler","loginData","setItem","toISOString","milliseconds","setTimeout","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css';\nimport Body from './container/Body/body';\n\n\n\nclass App extends Component {\n\nstate={\n    isAuth: false,\n    token: null,\n    adminId :null,\n    showSideBar: true,\n    \n\n  \n}\n\ncomponentDidMount=()=>{\n  const token = localStorage.getItem('token');\n  const expiryDate = localStorage.getItem('expiryDate');\n  if(!token || !expiryDate)\n  {\n    return\n  }\n  if (new Date(expiryDate) <= new Date()) {\n    this.logoutHandler();\n    return;\n  }\n\n  const adminId = localStorage.getItem('adminId');\n  const remainingMilliseconds = new Date(expiryDate).getTime() - new Date().getTime();\n  this.setState({ isAuth: true, token: token, adminId: adminId });\n  this.setAutoLogout(remainingMilliseconds);\n}\n\nlogoutHandler=()=>{\n  this.setState({isAuth: false, token: null})\n  localStorage.removeItem('token');\n  localStorage.removeItem('expiryDate');\n  localStorage.removeItem('adminId');\n  console.log('Loggedout')\n}\n\nsignupHandler=(adminData)=>{\n  console.log(adminData)\n  fetch('http://localhost:8080/signup/',{\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n\n      email: adminData.email,\n      password: adminData.password,\n      name: adminData.name\n\n    })\n  }).then(res=>{\n    if(res.status!==200 && res.status!==201)\n    {\n      throw new Error('create admin failed')\n    \n    }\n    return res.json();\n}).then(resData=>{\n  console.log(resData)\n  \n}).catch(err=>{\n  console.log(err)\n})\n\n}\n\nloginHandler=(loginData)=>{\n\n  console.log(loginData);\n  fetch('http://localhost:8080/login',{\n    method: 'POST',\n    headers:{\n      'Content-Type' : 'application/json'\n    },\n    body: JSON.stringify({\n      email: loginData.email,\n      password: loginData.password\n    })\n  }).then(res=>{\n    if(res.status!==200 && res.status !==201){\n      throw new Error('Login failed')\n    }\n    return res.json()\n  }).then(resData=>{\n   console.log(resData)\n    this.setState({\n      isAuth: true,\n      token: resData.token\n\n    })\n    localStorage.setItem('token', resData.token);\n    localStorage.setItem('adminId', resData.adminId)\n    const remainingMilliseconds = 60 * 60 * 1000;\n    const expiryDate = new Date(\n      new Date().getTime() + remainingMilliseconds\n    );\n    localStorage.setItem('expiryDate', expiryDate.toISOString());\n    this.setAutoLogout(remainingMilliseconds);\n\n  })\n \n  \n\n\n}\nsetAutoLogout = milliseconds => {\n  setTimeout(() => {\n    this.logoutHandler();\n  }, milliseconds);\n};\n\n\n  render(){\n\n\n  return (\n    <div className=\"App\">\n        \n         <Body logout={this.logoutHandler}  login={this.loginHandler} token={this.state.token} isAuth={this.state.isAuth} />\n       \n    \n    \n        \n    </div>\n  );\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}