{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\Projects\\\\e-commerce\\\\front-end\\\\src\\\\components\\\\checkout\\\\checkout.js\";\nimport React from 'react';\nimport './checkout.css';\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst checkout = props => {\n  return /*#__PURE__*/_jsxDEV(Auxiliary, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"order-summary\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"There are the following approaches to update nested state properties in ReactJS: Approach 1: We can create a dummy object to perform operations on it (update properties that we want) then replace the component\\u2019s state with the updated object. Approach 2: We can pass the old nested object using the spread operator and then override the particular properties of the nested object. Creating React Application: Step 1: Create a React application using the following command: npx create-react-app foldername Step 2: After creating your project folder i.e. foldername, move to it using the following command: cd foldername Project Structure: It will look like the following.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n{\n  /* <div class=\"container\">  \r\n   <form id=\"contact\" action=\"\" method=\"post\">\r\n     <h3>Colorlib Contact Form</h3>\r\n     <h4>Contact us for custom quote</h4>\r\n     <fieldset>\r\n       <input placeholder=\"Your name\" type=\"text\" tabindex=\"1\" required autofocus>\r\n     </fieldset>\r\n     <fieldset>\r\n       <input placeholder=\"Your Email Address\" type=\"email\" tabindex=\"2\" required>\r\n     </fieldset>\r\n     <fieldset>\r\n       <input placeholder=\"Your Phone Number (optional)\" type=\"tel\" tabindex=\"3\" required>\r\n     </fieldset>\r\n     <fieldset>\r\n       <input placeholder=\"Your Web Site (optional)\" type=\"url\" tabindex=\"4\" required>\r\n     </fieldset>\r\n     <fieldset>\r\n       <textarea placeholder=\"Type your message here....\" tabindex=\"5\" required></textarea>\r\n     </fieldset>\r\n     <fieldset>\r\n       <button name=\"submit\" type=\"submit\" id=\"contact-submit\" data-submit=\"...Sending\">Submit</button>\r\n     </fieldset>\r\n     <p class=\"copyright\">Designed by <a href=\"https://colorlib.com\" target=\"_blank\" title=\"Colorlib\">Colorlib</a></p>\r\n   </form>\r\n  </div> */\n}\nexport default checkout;","map":{"version":3,"sources":["D:/Work/Projects/e-commerce/front-end/src/components/checkout/checkout.js"],"names":["React","Auxiliary","checkout","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,OAAOC,SAAP,MAAsB,+BAAtB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAS;AAGxB,sBACE,QAAC,SAAD;AAAA,4BACK;AAAK,MAAA,KAAK,EAAC,eAAX;AAAA,6BACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,YADL,eAgBA;AAAI,MAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,YAhBA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAxBD;;AA4BA;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAU;AAEV,eAAeD,QAAf","sourcesContent":["import React from 'react';\r\nimport './checkout.css'\r\nimport Auxiliary from '../../hoc/Auxiliary/Auxiliary'\r\n\r\nconst checkout = (props)=>{\r\n\r\n\r\n  return(\r\n    <Auxiliary>\r\n         <div class='order-summary'>\r\n      <p>There are the following approaches to update nested state properties in ReactJS:\r\n\r\nApproach 1: We can create a dummy object to perform operations on it (update properties that we want) then replace the componentâ€™s state with the updated object.\r\nApproach 2: We can pass the old nested object using the spread operator and then override the particular properties of the nested object.\r\nCreating React Application:\r\n\r\nStep 1: Create a React application using the following command:\r\n\r\nnpx create-react-app foldername\r\nStep 2: After creating your project folder i.e. foldername, move to it using the following command:\r\n\r\ncd foldername\r\nProject Structure: It will look like the following.</p>\r\n    </div>\r\n    <hr className='line'></hr>\r\n    </Auxiliary>\r\n   \r\n  )\r\n}\r\n\r\n\r\n\r\n{/* <div class=\"container\">  \r\n  <form id=\"contact\" action=\"\" method=\"post\">\r\n    <h3>Colorlib Contact Form</h3>\r\n    <h4>Contact us for custom quote</h4>\r\n    <fieldset>\r\n      <input placeholder=\"Your name\" type=\"text\" tabindex=\"1\" required autofocus>\r\n    </fieldset>\r\n    <fieldset>\r\n      <input placeholder=\"Your Email Address\" type=\"email\" tabindex=\"2\" required>\r\n    </fieldset>\r\n    <fieldset>\r\n      <input placeholder=\"Your Phone Number (optional)\" type=\"tel\" tabindex=\"3\" required>\r\n    </fieldset>\r\n    <fieldset>\r\n      <input placeholder=\"Your Web Site (optional)\" type=\"url\" tabindex=\"4\" required>\r\n    </fieldset>\r\n    <fieldset>\r\n      <textarea placeholder=\"Type your message here....\" tabindex=\"5\" required></textarea>\r\n    </fieldset>\r\n    <fieldset>\r\n      <button name=\"submit\" type=\"submit\" id=\"contact-submit\" data-submit=\"...Sending\">Submit</button>\r\n    </fieldset>\r\n    <p class=\"copyright\">Designed by <a href=\"https://colorlib.com\" target=\"_blank\" title=\"Colorlib\">Colorlib</a></p>\r\n  </form>\r\n</div> */}\r\n\r\nexport default checkout;"]},"metadata":{},"sourceType":"module"}